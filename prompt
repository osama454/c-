"I'm working on developing a high-performance multi-threaded server in C++ that can handle multiple client connections concurrently using the Boost Asio library. The server needs to process incoming data from clients, perform specific transformations on this data, and return results in real-time. I need to implement both TCP and UDP protocols, where TCP ensures reliability and sequencing, while UDP is used for fast, low-latency communication where packet loss is acceptable. 

Additionally, I want to include a mechanism for load balancing across multiple threads, ensuring efficient resource usage while handling thousands of concurrent clients. The system must handle data serialization and deserialization, ensuring consistent message formats, and implement error-handling techniques to manage dropped connections or malformed requests. Could you provide example code for both TCP and UDP communication, alongside an explanation of how to use thread pools effectively for load balancing? What would be the best practices for ensuring scalability and robustness in such a system?"